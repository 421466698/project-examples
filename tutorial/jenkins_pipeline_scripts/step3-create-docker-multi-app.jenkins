#!/usr/bin/env groovy
import groovy.json.JsonSlurper

node {

    def WATCHNAME = env.JOB_NAME
    def jobName = env.JOB_NAME

    def REPO = "docker-virtual"
    def PROMOTE_REPO = "docker-prod-local"
    def SOURCE_REPO = "docker-stage-local"
    def rtServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
    def buildInfo = Artifactory.newBuildInfo()
    def tagName
    def tagDockerApp
    def rtDocker = Artifactory.docker server: rtServer
    buildInfo.env.capture = true


    stage ('Cleanup') {
        cleanWs()
    }

    stage ('Clone') {
        git url: 'https://github.com/jfrogtraining/project-examples.git', branch: 'soleng-team-demo'
    }

    //Fetch all depedencies from Artifactory
    stage ('Dependencies') {
        dir ('./tutorial/step3-create-docker-multi-app/') {
            currentBuild.displayName = BUILD_NUMBER

                try {
                    println "Gather Released Docker Framework and Gradle War file: Build " + BUILD_NUMBER

                    def latestVer = "gradle-release-local/" + getLatestGradleWar(SERVER_URL)
                    print "Path of last promoted gradle war: ${latestVer}"

                    def gradleWarDownload = """{
                        "files": [
                          {
                            "pattern": "${latestVer}",
                            "flat": "true"
                          }
                        ]
                     }"""
                     def npmDownload = """{
                        "files": [
                          {
                            "pattern": "npm-dev-virtual/frogsui/-/frogsui-0.3.0.tgz",
                            "flat": "true",
                            "explode": "true"
                          }
                        ]
                     }"""
                    rtServer.download(gradleWarDownload, buildInfo )
                    rtServer.download(npmDownload, buildInfo )
                    sh "ls && ls package/"
                } catch (Exception e) {
                    println "Caught Exception during resolution. Message ${e.message}"
                    throw e
                }
        }

    }

    //Build docker image named docker-app
    stage ('Build & Deploy') {
        dir ('./tutorial/step3-create-docker-multi-app/') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                tagDockerApp = "${artdocker_registry}/docker-multi-app:${env.BUILD_NUMBER}"
                docker.withRegistry ("http://${artdocker_registry}", CREDENTIALS) {
                      sh "docker login -u ${USERNAME} -p ${PASSWORD} https://${artdocker_registry}"
                      sh "ls"
                      docker.build(tagDockerApp)
                }
                buildInfo = rtDocker.push(tagDockerApp, REPO, buildInfo)
                rtServer.publishBuildInfo buildInfo
             }
        }
     }

    //Test docker image
     stage ('Test') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh 'docker rmi '+tagDockerApp+' || true'
                def rtDockera = Artifactory.docker server: rtServer
                docker.withRegistry ("https://${artdocker_registry}", CREDENTIALS) {
                      sh "docker login -u ${USERNAME} -p ${PASSWORD} https://${artdocker_registry}"
                      sh "docker pull ${tagDockerApp}"
                }
            }

     }

    //Scan Build Artifacts in Xray
    stage('Xray Scan') {
         if (XRAY_SCAN == "YES") {
             def xrayConfig = [
                'buildName'     : env.JOB_NAME,
                'buildNumber'   : env.BUILD_NUMBER,
                'failBuild'     : false
              ]
              def xrayResults = rtServer.xrayScan xrayConfig
              echo xrayResults as String
              sleep 60
         } else {
              println "No Xray scan performed. To enable set XRAY_SCAN = YES"
         }
     }

    //Promote docker image from staging local repo to production repo in Artifactory
     stage ('Promote') {

            def promotionConfig = [
              'buildName'          : env.JOB_NAME,
              'buildNumber'        : env.BUILD_NUMBER,
              'targetRepo'         : PROMOTE_REPO,
              'comment'            : 'App works with latest released version of gradle swampup app, tomcat and jdk',
              'sourceRepo'         : SOURCE_REPO,
              'status'             : 'Released',
              'includeDependencies': false,
              'copy'               : true
            ]
            promoteBuild (SOURCE_REPO, PROMOTE_REPO, SERVER_URL)
            // rtServer.promote promotionConfig - occassionally will hang on dry run
            reTagLatest (PROMOTE_REPO, SERVER_URL)


        // promote war file from gradle-release to gradle-prod

     }
}


//Tag docker image
def reTagLatest (promote_repo, server_url) {
    dir ('./tutorial/step3-create-docker-multi-app/'){
        def BUILD_NUMBER = env.BUILD_NUMBER
        sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        sh ("""
          sed -E "s/TARGETREPO/${promote_repo}/g" retag_out.json > retaga_out.json
          """)
        sh 'cat retaga_out.json'
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            def curlString = "curl -u " + env.USERNAME + ":" + env.PASSWORD + " " + server_url
            def regTagStr = curlString +  "/api/docker/${promote_repo}/v2/promote -X POST -H 'Content-Type: application/json' -T retaga_out.json"
            println "Curl String is " + regTagStr
           sh regTagStr
        }
    }
}

def promoteBuild (source_repo, promote_repo, SERVER_URL) {

    def buildPromotion = """ {
        "status"      : "Released",
        "comment"     : "Framework test with latest version of application",
        "ciUser"      : "jenkins",
        "sourceRepo"  : "${source_repo}",
        "targetRepo"  : "${promote_repo}",
        "copy"        : true,
        "dependencies" : false,
        "failFast": true
    }"""

    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
        def createPromo = ["curl", "-X", "POST", "-H", "Content-Type: application/json", "-d", "${buildPromotion }", "-u", "${env.USERNAME}:${env.PASSWORD}", "${SERVER_URL}/api/build/promote/${env.JOB_NAME}/${env.BUILD_NUMBER}"]
        try {
           def getPromoResponse = createPromo.execute().text
           def jsonSlurper = new JsonSlurper()
           def promoStatus = jsonSlurper.parseText("${getPromoResponse}")
           if (promoStatus.error) {
               println "Promotion failed: " + promoStatus
           }
        } catch (Exception e) {
           println "Promotion failed: ${e.message}"
        }
    }
}


def getLatestGradleWar (SERVER_URL) {

  def aqlString = 'items.find ({ "repo":"gradle-release-local", "path":{"\$match":"*frogsws/*"}, "name":{"\$match":"*.jar"} }).include("created","path","name").sort({"\$desc":["created"]}).limit(1)'

  println "Get gradle AQL: " + aqlString

   File aqlFile = File.createTempFile("gradlelatest", ".tmp")
   aqlFile.deleteOnExit()

   aqlFile << aqlString
   println "Get gradle AQL File: " + aqlFile

   withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
       def getLatestWar = "curl -u$USERNAME:$PASSWORD -X POST " + SERVER_URL + "api/search/aql -T " + aqlFile.getAbsolutePath()
       println "Get gradle AQL Query: " + getLatestWar
       try {
             def gradlewarinfo = getLatestWar.execute().text
             def jsonSlurper = new JsonSlurper()
             def latestWar = jsonSlurper.parseText("${gradlewarinfo}")
             def patha = latestWar.results[0].path + "/" + latestWar.results[0].name
             println "Get gradle AQL patha: " + patha
             return patha
        } catch (Exception e) {
            println "Caught exception finding lastest gradle war. Message ${e.message}"
            throw e
        }
    }
}
